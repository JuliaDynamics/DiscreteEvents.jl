var documenterSearchIndex = {"docs":
[{"location":"usage/#User-guide-1","page":"Usage","title":"User guide","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"CurrentModule = Sim","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Sim.jl is not yet an registered package and is installed with","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"pkg> add(\"https://github.com/pbayer/jl\")","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"The package is then loaded with","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"using Sim","category":"page"},{"location":"usage/#Modeling-and-simulation-1","page":"Usage","title":"Modeling and simulation","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"A virtual Clock allows to schedule Julia functions or expressions as timed events or as sampling actions, which occur at predefined clock ticks. When we run the Clock, it fires the events at their scheduled times and executes the sampling actions at each tick.","category":"page"},{"location":"usage/#Silly-example-1","page":"Usage","title":"Silly example","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"m = @__MODULE__ # catching the current module is needed for documentation\nusing Printf\ncomm = [\"Hi, nice to meet you!\", \"How are you?\", \"Have a nice day!\"];\ngreet(name, n) =  @printf(\"%5.2f s, %s: %s\\n\", œÑ(), name, comm[n])\nfunction foo(n) # 1st passerby\n    greet(\"Foo\", n)\n    event!(ùê∂, :(bar($n)), after, 2*rand(), scope = m)\nend\nfunction bar(n) # 2nd passerby\n    greet(\"Bar\", n)\n    if n < 3\n       event!(ùê∂, :(foo($n+1)), after, 2*rand(), scope = m)\n    else\n       println(\"bye bye\")\n    end\nend\nevent!(ùê∂, :(foo(1)), at, 10*rand(), scope = m); # create an event for a start\nrun!(ùê∂, 20) # and run the simulation","category":"page"},{"location":"usage/#Types-and-constants-1","page":"Usage","title":"Types and constants","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Clock\nTiming\nSimFunction","category":"page"},{"location":"usage/#Sim.Clock","page":"Usage","title":"Sim.Clock","text":"Clock(Œît::Number=0; t0::Number=0, unit::FreeUnits=NoUnits)\n\nCreate a new simulation clock.\n\nArguments\n\nŒît::Number=0: time increment\nt0::Number=0: start time for simulation\nunit::FreeUnits=NoUnits: clock time unit. Units can be set explicitely by\n\nsetting e.g. unit=minute or implicitly by giving Œît as a time or else setting t0 to a time, e.g. t0=60s.\n\nIf no Œît is given, the simulation doesn't tick, but jumps from event to event. Œît can be set later with sample_time!.\n\nExamples\n\njulia> using Sim, Unitful\n\njulia> import Unitful: s, minute, hr\n\njulia> c = Clock()\nClock: state=Sim.Undefined(), time=0.0, unit=, events: 0, sampling: 0, sample rate Œît=0.0\njulia> init!(c)\nClock: state=Sim.Idle(), time=0.0, unit=, events: 0, sampling: 0, sample rate Œît=0.0\njulia> c = Clock(1s, unit=minute)\nClock: state=Sim.Undefined(), time=0.0, unit=minute, events: 0, sampling: 0, sample rate Œît=0.016666666666666666\njulia> c = Clock(1s)\nClock: state=Sim.Undefined(), time=0.0, unit=s, events: 0, sampling: 0, sample rate Œît=1.0\njulia> c = Clock(t0=60s)\nClock: state=Sim.Undefined(), time=60.0, unit=s, events: 0, sampling: 0, sample rate Œît=0.0\njulia> c = Clock(1s, t0=1hr)\nClock: state=Sim.Undefined(), time=3600.0, unit=s, events: 0, sampling: 0, sample rate Œît=1.0\n\n\n\n\n\n","category":"type"},{"location":"usage/#Sim.Timing","page":"Usage","title":"Sim.Timing","text":"Timing\n\nEnumeration type for scheduling events and timed conditions:\n\nat: schedule an event at a given time\nafter: schedule an event a given time after current time\nevery: schedule an event every given time from now on\nbefore: a timed condition is true before a given time.\n\n\n\n\n\n","category":"type"},{"location":"usage/#Sim.SimFunction","page":"Usage","title":"Sim.SimFunction","text":"SimFunction(func::Function, arg...; kw...)\n\nType for preparing a function as an event to a simulation.\n\nArguments\n\nfunc::Function: function to be executed at a later simulation time\narg...: arguments to the function\nkw...: keyword arguments\n\nBe aware that, if the variables stored in a SimFunction are composite types, they can change until they are evaluated later by func. But that's the nature of simulation.\n\nExample\n\njulia> using Sim\n\njulia> f(a,b,c; d=4, e=5) = a+b+c+d+e  # define a function\nf (generic function with 1 method)\n\njulia> sf = SimFunction(f, 10, 20, 30, d=14, e=15)  # store it as SimFunction\nSimFunction(f, (10, 20, 30), Base.Iterators.Pairs(:d => 14,:e => 15))\n\njulia> sf.func(sf.arg...; sf.kw...)  # and it can be executed later\n89\n\njulia> d = Dict(:a => 1, :b => 2) # now we set up a dictionary\nDict{Symbol,Int64} with 2 entries:\n  :a => 1\n  :b => 2\n\njulia> f(t) = t[:a] + t[:b] # and a function adding :a and :b\nf (generic function with 2 methods)\n\njulia> f(d)  # our add function gives 3\n3\n\njulia> ff = SimFunction(f, d)   # we set up a SimFunction\nSimFunction(f, (Dict(:a => 1,:b => 2),), Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}())\n\njulia> d[:a] = 10  # later somehow we need to change d\n10\n\njulia> ff  # our SimFunction ff has changed too\nSimFunction(f, (Dict(:a => 10,:b => 2),), Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}())\n\njulia> ff.func(ff.arg...; ff.kw...)  # and calling it gives a different result\n12\n\n\n\n\n\n","category":"type"},{"location":"usage/#Central-time-1","page":"Usage","title":"Central time","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"ùê∂","category":"page"},{"location":"usage/#Sim.ùê∂","page":"Usage","title":"Sim.ùê∂","text":"ùê∂\nClk\n\nitalic ùê∂ (\\itC+Tab) or Clk is the central Clock()-variable, which normally is sufficient for simulation purposes.\n\nExamples\n\njulia> using Sim\n\njulia> ùê∂  # central clock\nClock: state=Sim.Idle(), time=0.0, unit=, events: 0, sampling: 0, sample rate Œît=0.0\njulia> Clk  # alias\nClock: state=Sim.Idle(), time=0.0, unit=, events: 0, sampling: 0, sample rate Œît=0.0\njulia> ùê∂.time\n0\n\n\n\n\n\n","category":"constant"},{"location":"usage/#Functions-1","page":"Usage","title":"Functions","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"setUnit!\nœÑ\nsample_time!\nevent!\nsample!\nincr!\nrun!\nstop!\nresume!\nsync!\nreset!","category":"page"},{"location":"usage/#Sim.setUnit!","page":"Usage","title":"Sim.setUnit!","text":"setUnit!(sim::Clock, new::FreeUnits)\n\nset a clock to a new time unit in Unitful. If necessary convert current clock times to the new unit.\n\nArguments\n\nsim::Clock\nnew::FreeUnits: new is one of ms, s, minute or hr or another Unitful\n\nTime unit.\n\nExamples\n\njulia> using Sim, Unitful\n\njulia> import Unitful: Time, s, minute, hr\n\njulia> c = Clock(t0=60); # setup a new clock with t0=60\nClock: state=Sim.Undefined(), time=60.0, unit=, events: 0, sampling: 0, sample rate Œît=0.0\njulia> œÑ(c) # current time is 60.0 NoUnits\n60.0\njulia> setUnit!(c, s)  # set clock unit to Unitful.s\n60.0 s\njulia> œÑ(c) # current time is now 60.0 s\n60.0 s\njulia> setUnit!(c, minute)  # set clock unit to Unitful.minute\n1.0 minute\njulia> œÑ(c) # current time is now 1.0 minute\n1.0 minute\njulia> typeof(œÑ(c))  # œÑ(c) now returns a time Quantity ...\nQuantity{Float64,ùêì,Unitful.FreeUnits{(minute,),ùêì,nothing}}\njulia> isa(œÑ(), Time)\ntrue\njulia> uconvert(s, œÑ(c)) # ... which can be converted to other time units\n60.0 s\njulia> œÑ(c).val  # it has a value of 1.0\n1.0\njulia> c.time  # internal clock time is set to 1.0 (is a Float64)\n1.0\njulia> c.unit  # internal clock unit is set to Unitful.minute\nminute\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.œÑ","page":"Usage","title":"Sim.œÑ","text":"œÑ(sim::Clock=ùê∂)\ntau(sim::Clock=Tau)\n\nReturn the current simulation time (œÑ=\tau+Tab).\n\nExamples\n\njulia> using Sim\n\njulia> œÑ() # gives the central time\n0.0\njulia> tau() # alias, gives the central time\n0.0\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.sample_time!","page":"Usage","title":"Sim.sample_time!","text":"sample_time!(sim::Clock, Œît::Number)\n\nset the clock's sampling time starting from now (ùê∂(sim)).\n\nArguments\n\nsim::Clock\nŒît::Number: sample rate, time interval for sampling\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.event!","page":"Usage","title":"Sim.event!","text":"event!(sim::Clock, ex::Union{Expr, SimFunction}, t::Number; scope::Module=Main, cycle::Number=0.0)::Float64\nevent!(sim::Clock, ex::Union{Expr, SimFunction}, T::Timing, t::Number; scope::Module=Main)::Float64\n\nSchedule a function or expression for a given simulation time.\n\nArguments\n\nsim::Clock: simulation clock\nex::{Expr, SimFunction}: an expression or SimFunction\nt::Float64 or t::Time: simulation time\nT::Timing: a timing, at, after or every (before behaves like at)\nscope::Module=Main: scope for the expression to be evaluated\ncycle::Float64=0.0: repeat cycle time for the event\n\nreturns\n\nScheduled internal simulation time (unitless) for that event.\n\nMay return a time > t from repeated applications of nextfloat(t) if there are events scheduled for t.\n\nExamples\n\njulia> using Sim, Unitful\n\njulia> import Unitful: s, minute, hr\n\njulia> myfunc(a, b) = a+b\nmyfunc (generic function with 1 method)\njulia> event!(ùê∂, SimFunction(myfunc, 1, 2), 1) # a 1st event\n1.0\njulia> event!(ùê∂, SimFunction(myfunc, 2, 3), 1) #  a 2nd event to the same time\n1.0000000000000002\njulia> event!(ùê∂, SimFunction(myfunc, 3, 4), 1s)\nWarning: clock has no time unit, ignoring units\n1.0000000000000004\njulia> setUnit!(ùê∂, s)\n0.0 s\njulia> event!(ùê∂, SimFunction(myfunc, 4, 5), 1minute)\n60.0\njulia> event!(ùê∂, SimFunction(myfunc, 5, 6), after, 1hr)\n3600.0\njulia> ùê∂\nClock: state=Sim.Idle(), time=0.0, unit=s, events: 5, sampling: 0, sample rate Œît=0.0\njulia> run!(ùê∂, 1hr)\n\"run! finished with 5 events, simulation time: 3600.0\"\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.sample!","page":"Usage","title":"Sim.sample!","text":"sample!(sim::Clock, ex::Union{Expr, SimFunction}; scope::Module=Main)\n\nenqueue an expression for sampling.\n\nArguments\n\nsim::Clock\nex::Union{Expr, SimFunction}: an expression or function\nscope::Module=Main: optional, a scope for the expression to be evaluated in\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.incr!","page":"Usage","title":"Sim.incr!","text":"incr!(sim::Clock)\n\nTake one simulation step, execute the next tick or event.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.run!","page":"Usage","title":"Sim.run!","text":"run!(sim::Clock, duration::Number)\n\nRun a simulation for a given duration.\n\nCall scheduled events and evaluate sampling expressions at each tick in that timeframe.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.stop!","page":"Usage","title":"Sim.stop!","text":"stop!(sim::Clock)\n\nStop a running simulation.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.resume!","page":"Usage","title":"Sim.resume!","text":"resume!(sim::Clock)\n\nResume a halted simulation.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.sync!","page":"Usage","title":"Sim.sync!","text":"sync!(sim::Clock, to::Clock=ùê∂)\n\nForce a synchronization of two clocks. Change all registered times of sim accordingly. Convert or force sim.unit to to.unit.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.reset!","page":"Usage","title":"Sim.reset!","text":"reset!(sim::Clock, Œît::Number=0; t0::Number=0, hard::Bool=true, unit=NoUnits)\n\nreset a clock\n\nArguments\n\nsim::Clock\nŒît::Number=0: time increment\nt0::Float64=0 or t0::Time: start time\nhard::Bool=true: time is reset, all scheduled events and sampling are\n\ndeleted. If hard=false, then only time is reset, event and sampling times are adjusted accordingly.\n\nunit=NoUnits: the Time unit for the clock after reset. If a Œît::Time is\n\ngiven, its Time unit goes into the clock Time unit. If only t0::Time is given, its Time unit goes into the clock time unit.\n\nExamples\n\njulia> using Sim, Unitful\n\njulia> import Unitful: s\n\njulia> c = Clock(1s, t0=60s)\nClock: state=Sim.Undefined(), time=60.0, unit=s, events: 0, sampling: 0, sample rate Œît=1.0\njulia> reset!(c)\n\"clock reset to t‚ÇÄ=0.0, sampling rate Œît=0.0.\"\njulia> c\nClock: state=Sim.Idle(), time=0.0, unit=, events: 0, sampling: 0, sample rate Œît=0.0\n\n\n\n\n\n","category":"function"},{"location":"usage/#Logging-1","page":"Usage","title":"Logging","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"A Logger allows to register variables and to record their states on demand. The last record is stored in the logging variable. According to the Logger's state it can be printed or stored in a table.","category":"page"},{"location":"usage/#Example-1","page":"Usage","title":"Example","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"sim = Clock(); # create a clock\nl = Logger(); # create a logging variable\ninit!(l, sim); # initialize the logger\n(a, b, c) = 1, 1, 1 # create some variables\nsetup!(l, [:a, :b, :c], scope = m); # register them for logging\nrecord!(l) # record the variables with the current clock time\nl.last # show the last record\nfunction f()  # a function for increasing and recording the variables\n  global a += 1\n  global b = a^2\n  global c = a^3\n  record!(l)\nend\nswitch!(l, 1); # switch logger to printing\nf() # increase and record the variables\nswitch!(l, 2); # switch logger to storing in data table\nfor i in 1:10 # create some events\n    event!(sim, :(f()), i, scope = m)\nend\nrun!(sim, 10) # run a simulation\nl.df # view the recorded values","category":"page"},{"location":"usage/#Types-1","page":"Usage","title":"Types","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Logger","category":"page"},{"location":"usage/#Sim.Logger","page":"Usage","title":"Sim.Logger","text":"Logger()\n\nSetup and return a logging variable.\n\n\n\n\n\n","category":"type"},{"location":"usage/#Functions-2","page":"Usage","title":"Functions","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"init!\nsetup!\nswitch!\nrecord!\nclear!","category":"page"},{"location":"usage/#Sim.init!","page":"Usage","title":"Sim.init!","text":"init!(sim::Clock)\n\ninitialize a clock.\n\n\n\n\n\ninit!(L::Logger, sim::Clock)\n\nInitialize a Logger.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.setup!","page":"Usage","title":"Sim.setup!","text":"setup!(L::Logger, vars::Array{Symbol})\n\nSetup a logger with logging variables.\n\nArguments\n\nL::Logger\nvars::Array{Symbol}: An array of symbols, e.g. of global variables\nscope::Module = Main: Scope in which to evaluate the variables\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.switch!","page":"Usage","title":"Sim.switch!","text":"switch!(L::Logger, to::Number=0)\n\nSwitch the operating mode of a logger.\n\nto = 0: no output, to = 1: print, `to = 2: store in log table\"\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.record!","page":"Usage","title":"Sim.record!","text":"record!(L::Logger)\n\nrecord the logging variables with the current operating mode.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Sim.clear!","page":"Usage","title":"Sim.clear!","text":"clear!(L::Logger)\n\nclear the loggers last record and data table.\n\n\n\n\n\n","category":"function"},{"location":"examples/greeting/#Two-guys-meet-1","page":"Two guys meet","title":"Two guys meet","text":"","category":"section"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"If two guys meet, there is standard verbiage, but some uncertainty in how long they need to greet and respond. We can simulate this as an introductory example.","category":"page"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"We call the needed modules and define some types and data:","category":"page"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"using Sim, Printf\n\nstruct Guy\n    name\nend\n\nabstract type Encounter end\nstruct Meet <: Encounter\n    someone\nend\nstruct Greet <: Encounter\n    num\n    from\nend\nstruct Response <: Encounter\n    num\n    from\nend\n\ncomm = (\"Nice to meet you!\", \"How are you?\", \"Have a nice day!\", \"bye bye\")","category":"page"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"We implement the behavior of the \"guys\" as step!-Œ¥-functions of a state machine. For that we use some features of Sim.jl:","category":"page"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"ùê∂ or Tau is the central clock,\nSimFunction prepares a Julia function for later execution,\nevent! schedules it for execution after some time,\nœÑ() gives the central time (T.time).","category":"page"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"say(name, n) =  @printf(\"%5.2f s, %s: %s\\n\", œÑ(), name, comm[n])\n\nfunction step!(me::Guy, œÉ::Meet)\n    event!(ùê∂, SimFunction(step!, œÉ.someone, Greet(1, me)), after, 2*rand())\n    say(me.name, 1)\nend\n\nfunction step!(me::Guy, œÉ::Greet)\n    if œÉ.num < 3\n        event!(ùê∂, SimFunction(step!, œÉ.from, Response(œÉ.num, me)), after, 2*rand())\n        say(me.name, œÉ.num)\n    else\n        say(me.name, 4)\n    end\nend\n\nfunction step!(me::Guy, œÉ::Response)\n    event!(ùê∂, SimFunction(step!, œÉ.from, Greet(œÉ.num+1, me)), after, 2*rand())\n    say(me.name, œÉ.num+1)\nend","category":"page"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"Then we define some \"guys\" and a starting event and tell the clock ùê∂ to run for twenty \"seconds\":","category":"page"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"foo = Guy(\"Foo\")\nbar = Guy(\"Bar\")\n\nevent!(ùê∂, SimFunction(step!, foo, Meet(bar)), at, 10*rand())\nrun!(ùê∂, 20)","category":"page"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"If we source this code, it will run a simulation:","category":"page"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"julia> include(\"docs/examples/greeting.jl\")\n 7.30 s, Foo: Nice to meet you!\n 8.00 s, Bar: Nice to meet you!\n 9.15 s, Foo: How are you?\n10.31 s, Bar: How are you?\n11.55 s, Foo: Have a nice day!\n12.79 s, Bar: bye bye\nFinished: 6 events, simulation time: 20.0","category":"page"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"Then we reset the clock ùê∂ for further simulations.","category":"page"},{"location":"examples/greeting/#","page":"Two guys meet","title":"Two guys meet","text":"julia> reset!(ùê∂)\nclock reset to t‚ÇÄ=0, sampling rate Œît=0.","category":"page"},{"location":"examples/tabletennis/#Table-tennis-1","page":"Table tennis","title":"Table tennis","text":"","category":"section"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"In table tennis we have some physical constraints, standard moves and rules, but uncertainty in execution due to lack of accuray and attentiveness of the players and so on.","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"We can model the players as state machines and do a simulation on it.","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"First we need to call the needed modules:","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"using Sim, Printf\nimport Sim.init!","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"Then we need some definitions for states, events and players:","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"abstract type PState end\nstruct Idle <: PState end\nstruct Wait <: PState end\nstruct Unalert <: PState end\n\nabstract type PEvent end\nstruct Start <: PEvent end\nstruct Serve <: PEvent end\nstruct Return <: PEvent end\nstruct Miss <: PEvent end\n\nmutable struct Player\n    name::AbstractString\n    opp::Union{Number,Player}\n    state::PState\n    accuracy::Float64\n    attentiveness::Float64\n    score::Int64\n\n    Player(name, acc, att) = new(name, 0, Idle(), acc, att, 0)\nend","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"We have to define the physical facts and a function to randomize them:","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"const dist = 3 # distance for ball to fly [m]\nconst vs   = 10 # serve velocity [m/s]\nconst vr   = 20 # return velocity [m/s]\n\nrd(s::Float64) = randn()*s + 1","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"Some functions describe the setup of players, serve and return. Here we use the following features of Sim.jl:","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"italic ùê∂ (\\itC+Tab) or Clk is the central clock,\nœÑ() or tau() gives the central time,\nevent! schedules an expression (or a function) for execution after some time on ùê∂s timeline.","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"function init!(p::Player, opp::Player)\n    p.opp = opp\n    if rand() ‚â§ p.attentiveness\n        p.state = Wait()\n    else\n        p.state = Unalert()\n    end\nend\n\nfunction serve(p::Player)\n    ts = 3 + dist*rd(0.15)/(vs*rd(0.25))\n    if (rand() ‚â§ p.accuracy) && (p.state == Wait())\n        event!(ùê∂, :(step!($(p.opp), Serve())), after, ts)\n        @printf(\"%.2f: %s serves %s\\n\", œÑ()+ts, p.name, p.opp.name)\n    else\n        event!(ùê∂, :(step!($(p.opp), Miss())), after, ts)\n        @printf(\"%.2f: %s serves and misses %s\\n\", œÑ()+ts, p.name, p.opp.name)\n    end\n    if rand() ‚â• p.attentiveness\n        p.state = Unalert()\n    end\nend\n\nfunction ret(p::Player)\n    tr = dist*rd(0.15)/(vr*rd(0.25))\n    if rand() ‚â§ p.accuracy\n        event!(ùê∂, :(step!($(p.opp), Return())), after, tr)\n        @printf(\"%.2f: %s returns %s\\n\", œÑ()+tr, p.name, p.opp.name)\n    else\n        event!(ùê∂, :(step!($(p.opp), Miss())), after, tr)\n        @printf(\"%.2f: %s returns and misses %s\\n\", œÑ()+tr, p.name, p.opp.name)\n    end\n    if rand() ‚â• p.attentiveness\n        p.state = Unalert()\n    end\nend","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"Note: In this case of scheduling an expression we need to interpolate p.opp with $(p.opp) to ensure that our step!-function gets the right player. Instead of scheduling expressions we normally would have scheduled our functions with SimFunction(step!, p.opp, Serve()), which eliminates the need for interpolation.","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"The behavior of a player is described by the following step!-Œ¥ transition functions with Œ¥(p, q·µ¶, œÉ) ‚Üí q·µß leading to some actions and a new state.","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"\"default transition for players\"\nstep!(p::Player, q::PState, œÉ::PEvent) =\n        println(\"undefined transition for $(p.name), $q, $œÉ\")\n\n\"player p gets a start command\"\nstep!(p::Player, ::Union{Wait, Unalert}, ::Start) = serve(p)\n\n\"player p is waiting and gets served or returned\"\nstep!(p::Player, ::Wait, ::Union{Serve, Return}) = ret(p)\n\n\"player p is unalert and gets served or returned\"\nfunction step!(p::Player, ::Unalert, ::Union{Serve, Return})\n    @printf(\"%.2f: %s looses ball\\n\", œÑ(), p.name)\n    p.opp.score += 1\n    p.state = Wait()\n    serve(p)\nend\n\n\"player p is waiting or unalert and gets missed\"\nfunction step!(p::Player, ::Union{Wait, Unalert}, ::Miss)\n    p.score += 1\n    p.state = Wait()\n    serve(p)\nend\n\n\"simplified `step!` call\"\nstep!(p::Player, œÉ::PEvent) = step!(p, p.state, œÉ)","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"Next we define and setup the players and give Ping the Start() command.","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"ping = Player(\"Ping\", 0.90, 0.90)\npong = Player(\"Pong\", 0.90, 0.90)\ninit!(ping, pong)\ninit!(pong, ping)\nstep!(ping, Start())","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"Finally we setup a simulation and analysis of the results:","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"run!(ùê∂, 30)\nprintln(\"Ping scored $(ping.score)\")\nprintln(\"Pong scored $(pong.score)\")","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"If we source this code, the simulation runs:","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"julia> include(\"docs/examples/tabletennis.jl\")\n3.35: Ping serves Pong\n3.47: Pong returns and misses Ping\n6.82: Ping serves Pong\n6.96: Pong returns Ping\n7.15: Ping returns Pong\n7.28: Pong returns Ping\n7.54: Ping returns Pong\n7.80: Pong returns Ping\n7.80: Ping looses ball\n11.27: Ping serves Pong\n11.45: Pong returns Ping\n11.59: Ping returns Pong\n11.92: Pong returns Ping\n12.08: Ping returns Pong\n12.08: Pong looses ball\n15.59: Pong serves Ping\n15.59: Ping looses ball\n18.75: Ping serves Pong\n18.91: Pong returns Ping\n18.91: Ping looses ball\n22.15: Ping serves Pong\n22.30: Pong returns Ping\n22.30: Ping looses ball\n25.62: Ping serves Pong\n25.83: Pong returns Ping\n26.19: Ping returns and misses Pong\n29.50: Pong serves and misses Ping\n32.75: Ping serves Pong\nFinished: 22 events, simulation time: 30.0\nPing scored 3\nPong scored 5","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"Finally we should reset the clock for following simulations:","category":"page"},{"location":"examples/tabletennis/#","page":"Table tennis","title":"Table tennis","text":"julia> reset!(ùê∂)\nclock reset to t‚ÇÄ=0, sampling rate Œît=0.","category":"page"},{"location":"examples/examples/#Programs-1","page":"Further examples","title":"Programs","text":"","category":"section"},{"location":"examples/examples/#","page":"Further examples","title":"Further examples","text":"are at https://github.com/pbayer/Sim.jl/tree/master/docs/examples","category":"page"},{"location":"examples/examples/#Notebooks-1","page":"Further examples","title":"Notebooks","text":"","category":"section"},{"location":"examples/examples/#","page":"Further examples","title":"Further examples","text":"are at https://github.com/pbayer/Sim.jl/tree/master/docs/notebooks","category":"page"},{"location":"overview/#Discrete-event-simulation-with-Sim.jl-1","page":"Overview","title":"Discrete event simulation with Sim.jl","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"Sim.jl evaluates Julia expressions or arbitrary functions at given (virtual) simulation times.\nThus discrete event systems based on state machines can be modeled and simulated.\nVariables can be logged over simulation time and then accessed for","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"analysis or visualization.","category":"page"},{"location":"overview/#The-clock-1","page":"Overview","title":"The clock","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"Sim.jl provides a clock for a simulation time  (a Float64) with an arbitrary unit of time. A unit can be set and times can be given to the clock with Unitful time units and thus are automatically converted.","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"Clock(Œît::Number=0; t0::Number=0): create a new clock with start time t0 and sample time Œît.\nitalic ùê∂ (\\itC+Tab) or Clk : is the central Clock() variable.\nœÑ(sim::Clock=ùê∂): return the current clock time.\nsample_time!(sim::Clock, Œît::Number): set the clock's sample rate starting from now(sim).\nreset!(sim::Clock, Œît::Number=0; t0::Time=0, hard::Bool=true): reset a clock.\nsync!(sim::Clock, to::Clock=ùê∂): Force a synchronization of two clocks.","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"If no Œît ‚â† 0 is given, the simulation doesn't tick with a fixed interval, but jumps from event to event.","category":"page"},{"location":"overview/#Functions-and-expressions-as-Events-1","page":"Overview","title":"Functions and expressions as Events","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"Julia functions or expressions are scheduled as events on the clock's time line:","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"SimFunction(func::Function, arg...; kw...): prepare a function and its arguments for simulation.\nevent!(sim::Clock, ex::Union{Expr,SimFunction}, t::Float64) or\nevent!(sim, ex, at, t): schedule a function or an expression for a given simulation time.\nevent!(sim, ex, after, t): schedule a function or an expression for time t after current simulation time.\nevent!(sim, ex, every, Œît): schedule a function an expression for now and every time step Œît until end of simulation.","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"Events are called later as we step or run through the simulation. They may at runtime create further events and thus cause chains of events to be scheduled and called during simulation.","category":"page"},{"location":"overview/#Sampling-expressions-1","page":"Overview","title":"Sampling expressions","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"If we provide the clock with a time interval Œît, it ticks with a fixed sample rate. At each tick it will call registered functions or expressions:","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"sample!(sim::Clock, ex::Union{Expr,SimFunction}): enqueue a function or expression for sampling.","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"Sampling functions or expressions are called at clock ticks in the sequence they were registered. They are called before any events which may have been scheduled for the same time.","category":"page"},{"location":"overview/#Running-the-simulation-1","page":"Overview","title":"Running the simulation","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"Now, after we have setup a clock, scheduled events or setup sampling, we can step or run through a simulation, stop or resume it.","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"run!(sim::Clock, duration::Number): run a simulation for a given duration. Call all ticks and scheduled events in that timeframe.\nincr!(sim::Clock): take one simulation step, call the next tick or event.\nstop!(sim::Clock): stop a simulation\nresume!(sim::Clock): resume a halted simulation.","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"Now we can evaluate the results.","category":"page"},{"location":"overview/#Logging-1","page":"Overview","title":"Logging","text":"","category":"section"},{"location":"overview/#","page":"Overview","title":"Overview","text":"Logging enables us to trace variables over simulation time and such analyze their behaviour.","category":"page"},{"location":"overview/#","page":"Overview","title":"Overview","text":"L = Logger(): create a new logger, providing the newest record L.last, a logging table L.df and a switch L.ltype between logging types.\ninit!(L::Logger, sim::Clock=ùê∂):\nsetup!(L::Logger, vars::Array{Symbol}): setup L, providing it with an array of logging variables [:a, :b, :c ...]\nswitch!(L::Logger, to::Number=0): switch between 0: only keep the last record, 1: print, 2: write records to the table\nrecord!(L::Logger): record the logging variables with current simulation time.","category":"page"},{"location":"examples/singleserver/#Single-server-1","page":"Single server","title":"Single server","text":"","category":"section"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"This example is from Choi, Kang: Modeling and Simulation of Discrete-Event Systems, p. 18. It describes a single server system. The event graph given is:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"(Image: single server)","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"Initially there are no jobs in the queue Q and the machine M is idle.\nJobs arrive with an inter-arrival-time t_aand are added to Q.\nIf M is idle, it loads a job, changes to busy and executes the job with service time t_s.\nAfter that it changes to idle and, if Q is not empty, it loads the next job.","category":"page"},{"location":"examples/singleserver/#Implementing-it-1","page":"Single server","title":"Implementing it","text":"","category":"section"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"We use this simple example for illustration of how it can be modeled, simulated and analyzed using Sim.jl. First we have to import the necessary modules:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"using Sim, Random, Distributions, DataFrames, Plots, LaTeXStrings\npyplot()","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"We have to define some data structures, variables and a function for collecting stats:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"abstract type MState end\n\nstruct Idle <: MState end\nstruct Busy <: MState end\n\nmutable struct Job\n    no::Int64\n    ts::Float64\n    t1::Float64\n    t2::Float64\n    t3::Float64\nend\n\nmutable struct Machine\n    state::MState\n    job\nend\n\nQ = Job[]   # input queue\nS = Job[]   # stock\nM = Machine(Idle(), 0)\ndf = DataFrame(time = Float64[], buffer=Int[], machine=Int[], finished=Int[])\ncount = 1\nprinting = true\n\nstats() = push!(df, (œÑ(), length(Q), M.state == Busy() ? 1 : 0, length(S)))","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"We can model our system activity-based und therefore implement functions for the three main activities (arrive, load, unload), which call each other during simulation.","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"We use the arrival-function for modeling arrival rate t_a with an Erlang and service time t_s with a Normal distribution. We determine the capacity of the server with a c variable such that c  1 gives us overcapacity and c = 1 means that mean service time equals mean arrival rate bart_s = bart_a.","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"function arrive(Œº, œÉ, c)\n    @assert Œº ‚â• 1 \"Œº must be ‚â• 1\"\n    ts = rand(Normal(Œº, œÉ))/c\n    job = Job(count, ts, œÑ(), 0, 0)\n    global count += 1\n    push!(Q, job)\n    ta = rand(Erlang())*Œº\n    event!(ùê∂, SimFunction(arrive, Œº, œÉ, c), after, ta)  # we schedule the next arrival\n    printing ? println(œÑ(), \": job $(job.no) has arrived\") : nothing # œÑ() is the current time\n    if M.state == Idle()\n        load()\n    else\n        stats()\n    end\nend\n\nfunction load()\n    M.state = Busy()\n    M.job = popfirst!(Q)\n    M.job.t2 = œÑ()\n    event!(ùê∂, SimFunction(unload), after, M.job.ts)  # we schedule the unload\n    printing ? println(œÑ(), \": job $(M.job.no) has been loaded\") : nothing\n    stats()\nend\n\nfunction unload()\n    M.state = Idle()\n    M.job.t3 = œÑ()\n    push!(S, M.job)\n    printing ? println(œÑ(), \": job $(M.job.no) has been finished\") : nothing\n    stats()\n    M.job = 0\n    if !isempty(Q)\n        load()\n    end\nend","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"We want to collect stats() at a sample rate of 0.1:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"sample_time!(ùê∂, 0.1)  # we determine the sample rate\nSim.sample!(ùê∂, SimFunction(stats));  # we register stats() as sampling function","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"We assume now that the capacity equals the arrivals and provide no overcapacity.  Therefore  we start with one arrival and mu = 5, sigma = 15 and c = 1 and let our system run for 30 minutes (let's assume our time unit be minutes):","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"Random.seed!(2019)\narrive(5, 1/5, 1)  # we schedule the first event\nrun!(ùê∂, 30)        # and run the simulation","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"This will give us as output:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"0: job 1 has arrived\n0: job 1 has been loaded\n4.947453062901819: job 1 has been finished\n8.515206032139384: job 2 has arrived\n8.515206032139384: job 2 has been loaded\n8.56975795472613: job 3 has arrived\n8.666481204359087: job 4 has arrived\n10.338522593089287: job 5 has arrived\n11.021099411385869: job 6 has arrived\n13.267881315092211: job 7 has arrived\n13.703372376147774: job 2 has been finished\n13.703372376147774: job 3 has been loaded\n18.726550601155594: job 3 has been finished\n18.726550601155594: job 4 has been loaded\n19.55941423914075: job 8 has arrived\n19.58302738045451: job 9 has arrived\n20.543366077813385: job 10 has arrived\n22.752994020639125: job 11 has arrived\n23.563550850400553: job 4 has been finished\n23.563550850400553: job 5 has been loaded\n23.960464112286694: job 12 has arrived\n26.84742108339802: job 13 has arrived\n28.18186102251928: job 5 has been finished\n28.18186102251928: job 6 has been loaded\n\"run! finished with 17 events, simulation time: 30.0\"","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"Using our collected data, we can plot the simulation model trajectory:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"function trajectory_plot()\n    p1 = plot(df.time, df.buffer, ylabel=\"buffer\", fill=(0,0.1,:blue))\n    p2 = plot(df.time, df.machine, ylabel=\"machine\", fill=(0,0.1,:blue))\n    p3 = plot(df.time, df.finished, xlabel=\"time [min]\", ylabel=\"stock\", fill=(0,0.1,:blue))\n    plot(p1,p2,p3, layout=(3,1), legend=false)\nend\ntrajectory_plot()","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"(Image: trajectory plot 1)","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"It seems that the queue increases over time. Thus we are interested in the behaviour of our model over a longer time. Therefore we switch off printing and continue the simulation for further 970 \"minutes\".","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"printing = false\nrun!(ùê∂, 970)        # we continue the simulation\ntrajectory_plot()","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"(Image: trajectory plot 2)","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"It seems that buffer size is increasing ever more over time. In the plot now machine load and stock aren't very instructive, so let's compare lead time W and number of jobs in the system L = textbuffer_size + textmachine_load:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"function WvsL() # get more instructive info from simulation run\n    t = [j.t1 for j ‚àà S]\n    W = [j.t3 - j.t1 for j ‚àà S]\n    ts = [j.t3 - j.t2 for j ‚àà S]\n    subs = [i ‚àà t for i ‚àà df.time]\n    L = (df.buffer + df.machine)[subs]\n    l = df.machine[subs]\n    DataFrame(time=t, load=l, W=W, L=L, ts=ts)\nend\nd = WvsL()\nplot(d.time, d.W, label=\"W [min]\", xlabel=\"time [min]\", lw=2, legend=:topleft, title=\"L and W over time\")\nplot!(d.time, d.L, label=\"L [jobs]\", lw=2)","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"(Image: L and W over time)","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"Lead time W and unfinished jobs L are clearly increasing, the system is not stationary and gets jammed over time. Let's collect some stats:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"collect_stats() =\n    (Lm = mean(d.L), Wm = mean(d.W), Œ∑ = mean(df.machine), tsm = mean(d.ts))\ncollect_stats()\n(Lm = 16.21105527638191, Wm = 78.8196419189297, Œ∑ = 0.9778719397363466, tsm = 5.003771234356064)","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"Server load of overlineŒ∑  98 is great, but the mean queue length overlineL of 16 and mean lead time overlineW  79 min are way too long for a service time of t_s  5 min. So let's analyze the dependency of mean queue length overlineL on server capacity c. For that we can manipulate the server capacity in the arrival function and collect the results in a table:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"df1 = DataFrame(c=Float64[], Lm=Float64[], Wm=Float64[], Œ∑=Float64[], tsm=Float64[])\nfor c ‚àà collect(0.97:0.01:1.7)\n    global Q = Job[]   # input queue\n    global S = Job[]   # stock\n    global M = Machine(Idle(), 0)\n    global df = DataFrame(time = Float64[], buffer=Int[], machine=Int[], finished=Int[])\n    global count = 1\n\n    reset!(ùê∂)                            # reset ùê∂\n    sample_time!(ùê∂, 1)                   # set sample rate to 1\n    Sim.sample!(ùê∂, SimFunction(stats))   # register the stats() function for sampling\n\n    Random.seed!(2019)\n    arrive(5, 1/5, c)\n    run!(ùê∂, 1000)                        # run another simulation for 1000 \"min\"\n    global d = WvsL()\n    s = collect_stats()\n    push!(df1, (c, s.Lm, s.Wm, s.Œ∑, s.tsm))\nend","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"We can look at it in a scatter plot:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"scatter(df1.c, df1.Wm, title=L\"\\overline{W}\"*\" and \"*L\"\\overline{L}\"*\" over server capacity\",\n    xlabel=\"server capacity\", marker = (:o, 3, 0.4, :blue), label=L\"\\overline{W}\"*\" [min]\")\nscatter!(df1.c, df1.Lm, marker = (:x, 4), label=L\"\\overline{L}\"*\" [jobs]\")","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"(Image: W and L over server capacity)","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"We need to increase server capacity much in order to avoid long queues and waiting times.","category":"page"},{"location":"examples/singleserver/#How-about-Little's-law?-1","page":"Single server","title":"How about Little's law?","text":"","category":"section"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"overlineW and overlineL seem to be proportional. This is stated by Little's law:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"beginequation\nL = lambdatimes W\nendequation","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"for stationary systems with lambda = arrival rate. In our case lambda = t_a = 5. Let's look at it:","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"scatter(df1.Lm, df1.Wm, xlabel=L\"\\overline{L}\"*\" [jobs]\", ylabel=L\"\\overline{W}\"*\" [min]\",\n    marker = (:o, 4, 0.4, :blue), label=\"data\", title=\"Little's law\", legend=:topleft)\nplot!(df1.Lm, df1.Lm*5, label=\"theory \"*L\"(\\overline{L}\\times 5)\")","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"(Image: Little's law)","category":"page"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"Data seems not quite to fit theory. Reason is that the system is not stationary. But for a first approach, Little's law seems not to be a bad one. In order to analyze stability and stationarity and to improve, we could refine our analysis by taking only the second half of the simulation data or by doing more simulation runs and having some more fun with Sim.jl ...","category":"page"},{"location":"examples/singleserver/#-1","page":"Single server","title":"üòÑ","text":"","category":"section"},{"location":"examples/singleserver/#","page":"Single server","title":"Single server","text":"pb, 2019-11-01","category":"page"},{"location":"#Sim.jl-1","page":"Home","title":"Sim.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A Julia package for discrete event simulation.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Sim.jl introduces a Clock and a central time and allows to schedule and call arbitrary Julia functions or expressions at their scheduled time or at each clock tick.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Sim.jl is not yet an registered package and is installed with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> add(\"https://github.com/pbayer/Sim.jl\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Author: Paul Bayer License: MIT","category":"page"},{"location":"internals/#Internals-1","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/#","page":"Internals","title":"Internals","text":"CurrentModule = Sim","category":"page"},{"location":"internals/#Module-1","page":"Internals","title":"Module","text":"","category":"section"},{"location":"internals/#","page":"Internals","title":"Internals","text":"Sim","category":"page"},{"location":"internals/#Sim.Sim","page":"Internals","title":"Sim.Sim","text":"Sim\n\nA Julia package for discrete event simulation based on state machines.\n\n\n\n\n\n","category":"module"},{"location":"internals/#","page":"Internals","title":"Internals","text":"The module contains two main types: Clock and Logger. Both are implemented as state machines. The implementation functions and types are not exported. The exported functions documented above under Usage are commands to the internal state machines.","category":"page"},{"location":"internals/#State-machines-1","page":"Internals","title":"State machines","text":"","category":"section"},{"location":"internals/#","page":"Internals","title":"Internals","text":"We have some definitions for them to work.","category":"page"},{"location":"internals/#","page":"Internals","title":"Internals","text":"SEngine","category":"page"},{"location":"internals/#Sim.SEngine","page":"Internals","title":"Sim.SEngine","text":"supertype for state machines in Sim.jl\n\n\n\n\n\n","category":"type"},{"location":"internals/#States-1","page":"Internals","title":"States","text":"","category":"section"},{"location":"internals/#","page":"Internals","title":"Internals","text":"Defined states for state machines.","category":"page"},{"location":"internals/#","page":"Internals","title":"Internals","text":"SState\nUndefined\nIdle\nEmpty\nBusy\nHalted","category":"page"},{"location":"internals/#Sim.SState","page":"Internals","title":"Sim.SState","text":"supertype for states\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Undefined","page":"Internals","title":"Sim.Undefined","text":"a state machine is undefined (after creation)\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Idle","page":"Internals","title":"Sim.Idle","text":"a state machine is idle\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Empty","page":"Internals","title":"Sim.Empty","text":"a state machine is empty\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Busy","page":"Internals","title":"Sim.Busy","text":"a state machine is busy\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Halted","page":"Internals","title":"Sim.Halted","text":"a state machine is halted\n\n\n\n\n\n","category":"type"},{"location":"internals/#Events-1","page":"Internals","title":"Events","text":"","category":"section"},{"location":"internals/#","page":"Internals","title":"Internals","text":"Defined events.","category":"page"},{"location":"internals/#","page":"Internals","title":"Internals","text":"SEvent\nInit\nSetup\nSwitch\nLog\nStep\nRun\nStart\nStop\nResume\nClear","category":"page"},{"location":"internals/#Sim.SEvent","page":"Internals","title":"Sim.SEvent","text":"supertype for events\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Init","page":"Internals","title":"Sim.Init","text":"Init(info): Init event with some info.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Setup","page":"Internals","title":"Sim.Setup","text":"Setup(vars::Array{Symbol,1}, scope::Module): setup a logger with some info.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Switch","page":"Internals","title":"Sim.Switch","text":"Switch(to): switch to some other mode\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Log","page":"Internals","title":"Sim.Log","text":"Log(): record command for logging\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Step","page":"Internals","title":"Sim.Step","text":"Step(): command\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Run","page":"Internals","title":"Sim.Run","text":"Run(): command\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Start","page":"Internals","title":"Sim.Start","text":"Start(): command\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Stop","page":"Internals","title":"Sim.Stop","text":"Stop(): command\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Resume","page":"Internals","title":"Sim.Resume","text":"Resume(): command\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Clear","page":"Internals","title":"Sim.Clear","text":"Clear(): command\n\n\n\n\n\n","category":"type"},{"location":"internals/#Transition-functions-1","page":"Internals","title":"Transition functions","text":"","category":"section"},{"location":"internals/#","page":"Internals","title":"Internals","text":"In state machines transitions occur depending on states and events. The different transitions are described through different methods of the step!-function.","category":"page"},{"location":"internals/#","page":"Internals","title":"Internals","text":"step!","category":"page"},{"location":"internals/#Sim.step!","page":"Internals","title":"Sim.step!","text":"step!(A::SEngine, q::SState, œÉ::SEvent)\n\nDefault transition for clock and logger.\n\nThis is called if no otherwise defined transition occurs.\n\nArguments\n\nA::SEngine: state machine for which a transition is called\nq::SState:  state of the state machine\nœÉ::SEvent:  event, triggering the transition\n\n\n\n\n\nstep!(sim::Clock, ::Undefined, ::Init)\n\ninitialize a clock.\n\n\n\n\n\nstep!(sim::Clock, ::Undefined, œÉ::Union{Step,Run})\n\nif uninitialized, initialize and then Step or Run.\n\n\n\n\n\nstep!(sim::Clock, ::Union{Idle,Busy,Halted}, ::Step)\n\nstep forward to next tick or scheduled event.\n\nAt a tick evaluate all sampling expressions, or, if an event is encountered evaluate the event expression.\n\n\n\n\n\nstep!(sim::Clock, ::Idle, œÉ::Run)\n\nRun a simulation for a given duration.\n\nThe duration is given with Run(duration). Call scheduled events and evaluate sampling expressions at each tick in that timeframe.\n\n\n\n\n\nstep!(sim::Clock, ::Busy, ::Stop)\n\nStop the clock.\n\n\n\n\n\nstep!(sim::Clock, ::Halted, ::Resume)\n\nResume a halted clock.\n\n\n\n\n\nstep!(sim::Clock, q::SState, œÉ::SEvent)\n\ncatch all step!-function.\n\n\n\n\n\nstep!(A::Logger, ::Undefined, œÉ::Init)\n\nInitialize a logger.\n\n\n\n\n\nstep!(A::Logger, ::Empty, œÉ::Setup)\n\nSetup a logger with logging variables. They are given by Setup(vars, scope).\n\n\n\n\n\nstep!(A::Logger, ::Idle, ::Clear)\n\nClear the last record and the data table of a logger.\n\n\n\n\n\nstep!(A::Logger, ::Idle, œÉ::Log)\n\nLogging event.\n\n\n\n\n\nstep!(A::Logger, ::Idle, œÉ::Switch)\n\nSwitch the operating mode of a logger by Switch(to).\n\nto = 0: no output, to = 1: print, `to = 2: store in log table\"\n\n\n\n\n\n","category":"function"},{"location":"internals/#Other-internal-types-and-functions-1","page":"Internals","title":"Other internal types and functions","text":"","category":"section"},{"location":"internals/#","page":"Internals","title":"Internals","text":"SimEvent\nSample\nsimExec\nnextevent\nnextevtime\nchecktime","category":"page"},{"location":"internals/#Sim.SimEvent","page":"Internals","title":"Sim.SimEvent","text":"SimEvent(expr::Expr, scope::Module, t::Float64, Œît::Float64)\n\nCreate a simulation event: an expression to be executed at event time.\n\nArguments\n\nexpr::Expr: expression to be evaluated at event time\nscope::Module: evaluation scope\nt::Float64: event time\nŒît::Float64: repeat rate with which the event gets repeated\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.Sample","page":"Internals","title":"Sim.Sample","text":"Sample(ex::Union{Expr, SimFunction}, scope::Module)\n\nCreate a sampling expression.\n\nArguments\n\nex::{Expr, SimFunction}: expression or function to be called at sample time\nscope::Module: evaluation scope\n\n\n\n\n\n","category":"type"},{"location":"internals/#Sim.simExec","page":"Internals","title":"Sim.simExec","text":"simExec(ex::Union{Expr,SimFunction}, m::Module=Main)\n\nevaluate an expression or execute a SimFunction.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Sim.nextevent","page":"Internals","title":"Sim.nextevent","text":"nextevent(sim::Clock)\n\nReturn the next scheduled event.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Sim.nextevtime","page":"Internals","title":"Sim.nextevtime","text":"nextevtime(sim::Clock)\n\nReturn the internal time (unitless) of next scheduled event.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Sim.checktime","page":"Internals","title":"Sim.checktime","text":"checktime(sim::Clock, t::Number)::Float64\n\ncheck t given according to clock settings and return value\n\n\n\n\n\n","category":"function"}]
}
